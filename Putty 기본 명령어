#docker = cd플레이어를 설치하는 것과 같다 

리눅스 기반으로 만들어진 프로세스 가상화 

그래서 리눅스로 설치하면 가볍고, 궁합이 좋다 

  

윈도우에서 설치하면 용량이 크다(리눅스가 아니기 때문이다) 

리눅스에 관련된 다른것도 다운하기 때문이다. 

  

cd(비유적인 표현)를 꽂으면 어디서든 동일하게 동작한다. 

https://hub.docker.com/(회원가입은 무료지만, 일정량 이상 사용시 유료) 

cd를 다운하는 공식 사이트 

  

별도 process 

적층형 이미지 

  

docker ps : 설치했고 구동중인 cd보기 

  

docker ps -a : 설치한 cd보기(구동X 포함) 

이름이 있고 컨테이너 고유번호가 있다 

이름은 같을 지라도 컨테이너 고유번호는 다르다.(해쉬값 같은거다) 

command : 어떤 명령어로 실행하는가? 

  

docker images : 실행중인 cd보기 

Image : 실제 cd의 파일명 - 뭘 베이스로 재생하는가? 

  

docker search ~ : docker를 검색한다 

  

docker run -it: 실행 명령어 

docker run -it ubuntu:18.04 /bin.bash 

실행 할때마다 새로운 컨테이너를 생성한다. 

i : interactive 실행 

t : tty 터미널 

-it : 터미널에 바로 접속하겠다 

파일명 뒤의 것도 실행하겠다. 

한번더 실행하면 하나더 만들어진다 

= 같은 cd로 2개를 돌린거다 

= 별개의 작업으로 분류된다. 

  

hostname으로 확인하면 아이디가 바껴있다. 

컨테이너 아이디명으로 가상화가 실행된다. 

  

cat /etc/issue : 우분투 버전확인 

  

ctrl + p + q : 우분투 가상화 세계에서 나온다 

우분투를 나올때 exit를 써서는 안된다. 

  

docker attach + 컨테이너 id : 다시 들어갈때 

attach 없이 진입하는법 

docker exec -it 컨테이너 아이디 /bin/bash 

attach로 안되는게 있다 - /bin/bash가 아닌 것으로 실행하면 안된다 

  

docker start + 컨테이너 아이디 : 정지시킨 걸 다시 시작한다. 

  

docker stop + 컨테이너 아이디 : 중지 

  

docker restart + 컨테이너 아이디 : 재시작(거의 안쓴다.) 

  

컨테이너 생성 규칙 

최소 용량으로 만든다 

= /bin/bash가 없는게 많고, sh를 많이 쓴다 

  

docker rm 컨테이너 이름 : 컨테이너만 지운다 

그냥은 못한다고 한다. 

먼저 정지 후 지우라한다.  

    docker rm -f 컨테이너 이름 : 강제로 지워라 

docker rmi 이미지 이름  : 이미지 삭제 (이경우 다시 다운로드 받아야한다.) 

연결된 컨테이너가 있으면 경고문이 뜬다 

강제로 지우면 베이스로 띄운건 남아있고 이미지만 남아있다. 

다시 올릴수가 있다. 이미지가 없더라도 

    docker rmi -f 이미지명 : 강제 삭제 

    docker run -it ubuntu:18.04 /bin/bash 

이미지가 없으면 땡겨와서 만든다 

  

docker run -d --name mynginx nginx :   

-d : 백그라운드 실행 

--name : 이름을 준다 

80port로 열었고 실제로 80port로 접속도 된다. 

단, 포트 포워딩으로 열어줘야한다. 

  

docker run -d --name mynginx -p 80000:80 nginx 

: 앞이 컨테이너 바깥, 뒤가 컨테이너 안쪽 

  

docker system df : 용량보기  

  

prune(안쓰는건 치워라) 

docker system prune -a : 불륨빼고 싹 다 지워준다.(돌고있는 것도 제외) 

네트워크, 이미지, 컨테이너 

docker volume prune : 컨테이너에서 사용하지 않는 모든 불륨을 삭제 
